services:
  consul:
    image: hashicorp/consul:1.17
    container_name: consul
    networks:
      - whole-system-network
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    environment:
      - CONSUL_BIND_INTERFACE=eth0
      - CONSUL_CLIENT_INTERFACE=eth0
    command: >
      consul agent -dev
      -client=0.0.0.0
      -bind=0.0.0.0
      -datacenter=dc1
      -ui
      -log-level=INFO
    volumes:
      - consul-data:/consul/data
      - consul-config:/consul/config
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    restart: unless-stopped

  gateway:
    build:
      context: ./app/gateway
      dockerfile: Dockerfile
    networks:
      - whole-system-network
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
      - ALLOWED_ORIGINS=http://localhost:5173,http://localhost:5174,http://localhost:5175,https://localhost:5176
    depends_on:
      consul:
        condition: service_healthy

  cms-main-system:
    build:
      context: ./app/cms-sys
      dockerfile: Dockerfile
    networks:
      - whole-system-network
    depends_on:
      postgres-cms:
        condition: service_healthy
      consul:
        condition: service_healthy
    environment:
      - CMS_APP_STATUS=${CMS_APP_STATUS}
      - CMS_DB_HOST=postgres-cms
      - CMS_DB_PORT=${CMS_DB_PORT}
      - CMS_DB_NAME=${POSTGRES_CMS_DB}
      - CMS_DB_USER=${POSTGRES_CMS_USER}
      - CMS_DB_PASSWORD=${POSTGRES_CMS_PASSWORD}
      - CMS_LOG_LEVEL=${CMS_LOG_LEVEL}
      - CMS_LOG_FILE_PATH=${CMS_LOG_FILE_PATH}
      - CMS_LOG_MAX_SIZE=${CMS_LOG_MAX_SIZE}
      - CMS_LOG_MAX_BACKUPS=${CMS_LOG_MAX_BACKUPS}
      - CMS_LOG_MAX_AGE=${CMS_LOG_MAX_AGE}
      - CMS_LOG_COMPRESS=${CMS_LOG_COMPRESS}
      - CONSUL_ENABLED=${CONSUL_ENABLED}
      - CMS_CONSUL_ADDRESS=${CMS_CONSUL_ADDRESS}
      - CMS_CONSUL_DATACENTER=${CMS_CONSUL_DATACENTER}
      - CMS_CONSUL_SCHEME=${CMS_CONSUL_SCHEME}
      - CMS_CONSUL_SERVICE_ID=cms-api-1
      - CMS_CONSUL_SERVICE_NAME=cms-service
      - CMS_CONSUL_SERVICE_TAGS=${CMS_SERVICE_TAGS}
      - CMS_CONSUL_CHECK_TTL=30s
      - CONSUL_CHECK_ID=service-check-cms-api-1
      - CMS_PORT=${CMS_PORT}
    ports:
      - "8081:8081"
    restart: unless-stopped

  postgres-cms:
    image: postgres:15-alpine
    container_name: postgres-cms
    environment:
      - POSTGRES_DB=${POSTGRES_CMS_DB}
      - POSTGRES_USER=${POSTGRES_CMS_USER}
      - POSTGRES_PASSWORD=${POSTGRES_CMS_PASSWORD}
    volumes:
      - postgres-cms:/var/lib/postgresql/data
      - ./schema/cms.sql:/docker-entrypoint-initdb.d/init-cms.sql
      - ./config/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf
    networks:
      - whole-system-network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_CMS_USER} -d ${POSTGRES_CMS_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: postgres -c 'hba_file=/etc/postgresql/pg_hba.conf'

  postgres-lms:
    image: postgres:15-alpine
    container_name: postgres-lms
    environment:
      - POSTGRES_DB=${POSTGRES_LMS_DB}
      - POSTGRES_USER=${POSTGRES_LMS_USER}
      - POSTGRES_PASSWORD=${POSTGRES_LMS_PASSWORD}
    volumes:
      - postgres-lms:/var/lib/postgresql/data
      - ./schema/lms.sql:/docker-entrypoint-initdb.d/init-cms.sql
      - ./config/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf
    networks:
      - whole-system-network
    ports:
      - "5433:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_LMS_USER} -d ${POSTGRES_LMS_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    command: postgres -c 'hba_file=/etc/postgresql/pg_hba.conf'

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "8000:80"
    volumes:
      - ./config/pgadmin/servers.json:/pgadmin4/servers.json
    networks:
      - whole-system-network
    depends_on:
      - postgres-cms
      - postgres-lms
    restart: unless-stopped

  dozzle:
    image: amir20/dozzle:latest
    container_name: dozzle
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8083:8080"
    networks:
      - whole-system-network
    restart: unless-stopped
    environment:
      - DOZZLE_LEVEL=${DOZZLE_LEVEL}
      - DOZZLE_TAIL=${DOZZLE_TAIL}

networks:
  whole-system-network:
    driver: bridge

volumes:
  postgres-cms:
    driver: local
  postgres-lms:
    driver: local
  consul-data:
    driver: local
  consul-config:
    driver: local